import { Connection as TediousConnection, ConnectionConfig } from 'tedious';
declare class Connection extends TediousConnection {
    execSqlAsync: (sqlString: string, options?: import("./extension-functions/types").execSqlAsyncOptions) => Promise<Error | import("./types").Dictionary[]>;
    onConnectAsync: () => Promise<Error | Connection>;
    onErrorAsync: () => Promise<Error>;
    onDebugAsync: () => Promise<string | void>;
    onEndAsync: () => Promise<void>;
    onErrorMessageAsync: () => Promise<void | import("./extension-functions/types").InfoMessage>;
    onInfoMessageAsync: () => Promise<void | import("./extension-functions/types").InfoMessage>;
    onDatabaseChangeAsync: () => Promise<string | void>;
    onLanguageChangeAsync: () => Promise<string | void>;
    onCharsetChangeAsync: () => Promise<string | void>;
    constructor(config: ConnectionConfig);
}
export default Connection;
